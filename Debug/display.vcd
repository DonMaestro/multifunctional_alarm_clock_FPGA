$date
	Sat Sep 18 15:00:14 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_display $end
$var reg 1 ! clk $end
$var reg 32 " data_all [31:0] $end
$var reg 11 # ram [10:0] $end
$var reg 1 $ rst_n $end
$var integer 32 % i [31:0] $end
$scope module m_display $end
$var wire 1 ! i_clk $end
$var wire 11 & i_comm [10:0] $end
$var wire 32 ' i_data [31:0] $end
$var wire 1 $ i_rst_n $end
$var wire 8 ( mux [7:0] $end
$var wire 1 ) o_E $end
$var wire 4 * o_decoder [3:0] $end
$var wire 8 + o_data [7:0] $end
$var wire 1 , o_RW $end
$var wire 1 - o_RS $end
$var wire 11 . command [10:0] $end
$var reg 4 / en [3:0] $end
$var integer 32 0 j [31:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk2[0] $end
$scope module m_reg_data $end
$var wire 8 1 i_D [7:0] $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 8 2 o_Q [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope module m_reg_data $end
$var wire 8 3 i_D [7:0] $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 8 4 o_Q [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope module m_reg_data $end
$var wire 8 5 i_D [7:0] $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 8 6 o_Q [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk2[3] $end
$scope module m_reg_data $end
$var wire 8 7 i_D [7:0] $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 8 8 o_Q [7:0] $end
$upscope $end
$upscope $end
$scope module m_decoder $end
$var wire 2 9 i_A [1:0] $end
$var wire 4 : o_P [3:0] $end
$upscope $end
$scope module m_reg_comm $end
$var wire 11 ; i_D [10:0] $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 11 < o_Q [10:0] $end
$upscope $end
$scope module m_reg_o_data $end
$var wire 8 = i_D [7:0] $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 8 > o_Q [7:0] $end
$upscope $end
$scope module m_reg_o_rs $end
$var wire 1 ? i_D $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 1 - o_Q $end
$upscope $end
$scope module m_reg_o_rw $end
$var wire 1 @ i_D $end
$var wire 1 ! i_clk $end
$var wire 1 $ i_rst_n $end
$var reg 1 , o_Q $end
$upscope $end
$scope module mux0 $end
$var wire 8 A i_D0 [7:0] $end
$var wire 8 B i_D1 [7:0] $end
$var wire 8 C i_D2 [7:0] $end
$var wire 8 D i_D3 [7:0] $end
$var wire 4 E i_en [3:0] $end
$var reg 8 F o_Q [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 F
b1 E
b0 D
b0 C
b0 B
b0 A
0@
0?
b0 >
b0 =
b0 <
b11111110000 ;
b1 :
b0 9
b0 8
bx 7
b0 6
bx 5
b0 4
b1111 3
b0 2
b11111111 1
b100 0
b1 /
b0 .
0-
0,
b0 +
b1 *
0)
b0 (
bx0000111111111111 '
b11111110000 &
b100 %
0$
b11111110000 #
bx0000111111111111 "
0!
$end
#100
1$
#2000
b1111 (
b1111 =
b1111 F
1@
1?
b11110000 A
b100 0
b10 /
b10 E
b11111110000 .
b11111110000 <
bx 8
bx D
bx 6
bx C
b1111 4
b1111 B
b11111111 2
1)
1!
#4000
0)
0!
#6000
b10 (
b10 =
b10 F
b10 A
b100 *
b100 :
b10 9
b100 0
b1 /
b1 E
b1100000010 .
b1100000010 <
b1111 +
b1111 >
1-
1,
b0 1
b11110000 3
b100 %
bx1111000000000000 "
bx1111000000000000 '
1)
1!
b1100000010 #
b1100000010 &
b1100000010 ;
#8000
0)
0!
#10000
b10 +
b10 >
b11110000 4
b11110000 B
b0 2
1)
1!
#12000
0)
0!
#14000
1)
1!
#16000
0)
0!
#18000
1)
1!
#20000
0)
0!
#22000
1)
1!
#24000
0)
0!
#26000
1)
1!
#28000
0)
0!
#30000
1)
1!
#32000
0)
0!
#34000
1)
1!
#36000
0)
0!
#38000
1)
1!
#40000
0)
0!
#42000
1)
1!
#44000
0)
0!
#46000
1)
1!
#48000
0)
0!
#50000
1)
1!
#52000
0)
0!
#54000
1)
1!
#56000
0)
0!
#58000
1)
1!
#60000
0)
0!
#62000
1)
1!
#64000
0)
0!
#66000
1)
1!
#68000
0)
0!
#70000
1)
1!
#72000
0)
0!
#74000
1)
1!
#76000
0)
0!
#78000
1)
1!
#80000
0)
0!
#82000
1)
1!
#84000
0)
0!
#86000
1)
1!
#88000
0)
0!
#90000
1)
1!
#92000
0)
0!
#94000
1)
1!
#96000
0)
0!
#98000
1)
1!
#100000
0)
0!
